// <auto-generated />
using System;
using Allocator.API.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Allocator.API.DAL.Migrations
{
    [DbContext(typeof(AllocatorContext))]
    [Migration("20220405115752_Add foreign keys Id's to model")]
    partial class AddforeignkeysIdstomodel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Allocator.API.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("Title");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Allocator.API.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StockId");

                    b.HasIndex("AccountId");

                    b.HasIndex("Company");

                    b.HasIndex("StockId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Allocator.API.Models.StockHistoryRow", b =>
                {
                    b.Property<int>("StockHistoryRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockHistoryRowId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 4, 5, 11, 57, 52, 887, DateTimeKind.Utc).AddTicks(374));

                    b.Property<double>("Input")
                        .HasPrecision(2)
                        .HasColumnType("float(2)");

                    b.Property<double>("Output")
                        .HasColumnType("float");

                    b.Property<double>("Profit")
                        .HasPrecision(2)
                        .HasColumnType("float(2)");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("StockHistoryRowId");

                    b.HasIndex("StockHistoryRowId");

                    b.HasIndex("StockId");

                    b.ToTable("StockHistoryRows");
                });

            modelBuilder.Entity("Allocator.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Allocator.API.Models.Account", b =>
                {
                    b.HasOne("Allocator.API.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Allocator.API.Models.Stock", b =>
                {
                    b.HasOne("Allocator.API.Models.Account", "Account")
                        .WithMany("Stocks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Allocator.API.Models.StockHistoryRow", b =>
                {
                    b.HasOne("Allocator.API.Models.Stock", "Stock")
                        .WithMany("StockHistory")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Allocator.API.Models.Account", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Allocator.API.Models.Stock", b =>
                {
                    b.Navigation("StockHistory");
                });

            modelBuilder.Entity("Allocator.API.Models.User", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
